    rgr - rgr.py - a Graph Database built on Redis

    __all__  = ('Graph', 'Node', 'Edge')

      _______________________________________________________________________
     | 
     |  class Graph(__builtin__.object)
     |_______________________________________________________________________
     | 
     |  Main interface for creating/removing/looking up graph elements.
     |  
     |  prereq's:
     |  ---------------------------
     |  
     |  - Redis server 
     |  - redis.py
     |  - redis_natives 
     |  
     |  usage: 
     |  ---------------------------
     |  
     |  from rgr import *
     |  
     |  g = Graph('mygraph') 
     |  
     |  # where 'mygraph' is the DB name in Redis. default is 'rgr'.
     |  # in the above example, all keys for this graph in Redis will
     |  # be prepended with 'mygraph:'
     |  
     |  node = g.addn(name='john',multiproperty=[1,2,3]) 
     |  node2 = g.addn(name='mary',multiproperty=[1,2,3]) 
     |  
     |  # add a node to the graph. returns a Node() object. Takes an 
     |  # arbitrary number of **kwargs and adds them to the new node
     |  # as properties. All properties are stored as lists in Redis, 
     |  # but you can still use them as strings when they have a single
     |  # value.
     |  
     |  edge = g.adde(node, node2, rel="knows")
     |  edge = g.adde(1, 0, rel="hates")
     |  
     |  # add an edge from node1 to node2 (or between 2 node ID's). 
     |  # (or a node and an ID for that matter)
     |  # takes and arbitrary number of **kwargs as properties.
     |  
     |  n = g.getn(name='john')
     |  e = g.gete(rel='knows')
     |  n = g.queryn(name='j.*') # just like get, only with regex's
     |  e = g.querye(rel='k.*')
     |  
     |  # returns an element or list of elements (depending on the case) 
     |  # that match the given **kwargs. This method implements an
     |  # exact lookup (no wildcards).
     |      
     |  g.deln(0)
     |  g.dele(0)
     |  
     |  # delete an element from the graph with the given ID.
     |  # deleting a node also deletes its adjacent edges.
     |  
     |  
     |  all_node_ids = g.nodes 
     |  all_edge_ids = g.edges
     |  
     |  # Set() of all node / edge ids currently in graph.
     |  # ( redis_natives.datatypes.Set type )
     |  # ( more specifically, rgr.NodeSet / rgr.EdgeSet)
     |
     |  #or, as generators yielding Node/Edge objects:
     |
     |  for n in g.nodes():
     |      print n._id
     |  for e in g.edges():
     |      print e._id
     |
     |  TODO: 
     |  ---------------------------
     |      what if redis server not on localhost:6379 ?
     |  ______________________________________________________________________
     |  
     |  Methods defined here:
     |  
     |  ----------------------------------------------------------------------
     |  __init__(self, name='rgr')
     |  ----------------------------------------------------------------------
     |      parameters: 
     |          name: optional  
     |              graph name in Redis. Keys in Redis are 
     |              prepended with name+':'
     |      
     |      returns:
     |          Graph() object
     |  
     |  ----------------------------------------------------------------------
     |  adde(self, parent, child, **kwargs)
     |  ----------------------------------------------------------------------
     |      add edge to graph.
     |       
     |      Parameters:
     |          parent: required
     |              Node or node id of start node.
     |          child: required
     |              Node or node id of end node.
     |          kwargs: optional
     |              key='value' properties to add to Edge
     |      
     |      Returns:        
     |          Edge() just created.
     |  
     |  ----------------------------------------------------------------------
     |  addn(self, **kwargs)
     |  ----------------------------------------------------------------------
     |      add node to graph.
     |      
     |      parameters:
     |          kwargs: optional
     |               property key='value' or key=['values'] pairs 
     |      
     |      returns:
     |           Node() object just created.
     |  
     |  ----------------------------------------------------------------------
     |  dele(self, edge)
     |  ----------------------------------------------------------------------
     |      delete edge by id or Edge() object.
     |      Parameters:
     |          edge: required
     |              Edge or edge ID to remove from graph.
     |      
     |      Note: if by object, you'll want to also 'del edge_obj'.
     |  
     |  ----------------------------------------------------------------------
     |  deln(self, node)
     |  ----------------------------------------------------------------------
     |      delete node by id or Node() object.
     |      Parameters:
     |          node: required
     |              Node or node ID to remove from graph.
     |      
     |      Note: if by object, you'll want to also 'del node_obj'.
     |  
     |  ----------------------------------------------------------------------
     |  gete(self, **kwargs)
     |  ----------------------------------------------------------------------
     |      Look up graph edges.
     |      
     |      Parameters:
     |          kwargs: optional
     |              key='value' pairs to look up. Returns the 
     |              intersection of results found for each key
     |              (AND operation). 
     |      
     |      Returns: 
     |          None: if nothing was found 
     |          Edge(): if one edge was found
     |          list(): of Edge's, if multiple edges are found.
     |  
     |  ----------------------------------------------------------------------
     |  getn(self, **kwargs)
     |  ----------------------------------------------------------------------
     |      Look up graph nodes.
     |      
     |      Parameters:
     |          kwargs: optional
     |              key='value' pairs to look up. Returns the 
     |              intersection of results found for each key
     |              (AND operation). 
     |      
     |      Returns: 
     |          None: if nothing was found 
     |          Node(): if one node was found
     |          list(): of Node's, if multiple nodes are found.
     |     
     |  ----------------------------------------------------------------------
     |  querye(self, **kwargs)
     |  ----------------------------------------------------------------------
     |      just like gete, only kwarg values are regex strings.
     |
     |  ----------------------------------------------------------------------
     |  queryn(self, **kwargs)
     |  ----------------------------------------------------------------------
     |      just like getn, only kwarg values are regex strings.
     |
     |  ----------------------------------------------------------------------
     |  _dump(self)
     |  ----------------------------------------------------------------------
     |      dumps all graph data to stdout in human-readable 
     |      format.
     |



      ________________________________________________________________________
     |
     |  class Node(GraphElement)
     |  ______________________________________________________________________
     |
     |  Represents a graph node. You probably won't often need
     |  to create these directly, but you can without issue (so long
     |  as it already exists in the graph).
     |  
     |  As it relates to Redis:
     |  ---------------------------
     |  
     |  - Node data is read directly from Redis when a Node() is instantiated.
     |  - Changes to a Node() are immediately reflected in Redis.
     |  - Changes to Redis from an outside source would (I believe) be immediately
     |      reflected by the Node()
     |  - del node_obj doesn't delete any data from redis.
     |  
     |  usage:
     |  ---------------------------
     |  
     |      g = Graph()
     |      n = g.addn()
     |  
     |  Node properties:
     |  ---------------------------
     |  
     |      #set a node property: these are auto indexed:
     |  
     |      n.name = "fred"
     |      # or:
     |      n.__setattr__('name','fred')
     |      | 
     |  Node data:
     |  ---------------------------
     |  
     |      data members themselves only contain Node/Edge ID's. However,
     |      if you call() them, you'll be given a generator which yields
     |      their corresponding Node/Edge object.
     |
     |      Callable data members are:
     |      _oe, _ie, _pn, _cn
     |
     |      n._pn 
     |      # might produce set(0,5,12)
     |
     |      for i in n._pn():
     |          print i
     |      # would produce :
     |      # <rgr.Node object at 0xdeadbeef>
     |      # <rgr.Node object at 0x...>
     |      # <rgr.Node object at 0x...>
     |
     |  type is redis_natives.datatypes.Set:
     |
     |      n._p          # keys of a node's properties
     |      n._properties # dict of node's property data
     |
     |  type rgr.EdgeSet:
     |      n._oe         # outgoing edge IDs
     |      n._oe()       # generator producing outgoing Edge's
     |      n._ie         # incoming edge IDs
     |      n._ie()       # generator producing incoming Edge's
     |
     |  Type rgr.NodeDict:
     |      n._pn         # parents' IDs and the number of edges coming from each
     |      n._pn()       # generator producing all parent nodes
     |      n._cn         # childrens' IDs and the number of edges going to each
     |      n._cn()       # generator producing all child nodes
     |  ______________________________________________________________________
     |  
     |  Method resolution order:
     |      Node
     |      GraphElement
     |      __builtin__.object
     |  
     |  ______________________________________________________________________
     |  
     |  Methods defined here:
     |  
     |  ----------------------------------------------------------------------
     |  __init__(self, graph, id)
     |  ----------------------------------------------------------------------
     |      initialize a Node.
     |      Parameter:
     |          graph: required
     |              parent Graph() object
     |      Parameter:
     |          id: required
     |              ID that the node will use. If it doesn't exist 
     |              in redis, it will be created there. Don't create
     |              new nodes directly, though, because Graph() keeps
     |              track of created nodes via Graph.addn().
     |      Returns:
     |          Node()
     |  
     |  ______________________________________________________________________
     |  
     |  Methods inherited from GraphElement:
     |  
     |  ----------------------------------------------------------------------
     |  __delattr__(self, name)
     |  ----------------------------------------------------------------------
     |      delete an attribute from an element.
     |      i.e. `del node.foo` removes 'foo' from
     |      redis and the index.
     |  
     |  ----------------------------------------------------------------------
     |  __getattr__(self, name)
     |  ----------------------------------------------------------------------
     |      python ignores this if it finds something in
     |      __dict__, otherwise, search _properties and
     |      throw an error if you try to access a property that
     |      doesn't exist.
     |  
     |  ----------------------------------------------------------------------
     |  __setattr__(self, name, value)
     |  ----------------------------------------------------------------------
     |      (abstract?) Base class for Node's and Edges. 
     |      
     |      all properties get placed into _properties dict
     |      unless they are instantiated during __init__.
     |      I stole a couple of lines from bulbflow to 
     |      make that happen.
     |     
     | ______________________________________________________________________



      _______________________________________________________________________
     |
     |   class Edge(GraphElement)
     |  _____________________________________________________________________
     |
     |  Represents a graph edge. You probably won't often need
     |  to create these directly, but you can without issue (so long
     |  as it already exists in the graph).
     |  
     |  As it relates to Redis, the same rules apply as for Node()'s.
     |  
     |  usage:
     |  ---------------------------
     |  
     |      g = Graph()
     |      n1 = g.addn()
     |      n2 = g.addn()
     |  
     |      e = g.adde(n1,n2,rel="knows")
     |      nid1, nid2 = n1._id, n2._id #id is an int()
     |      e2 = g.adde(nid2,nid1,rel="hates")
     |  
     |  Edge properties:
     |  ---------------------------
     |  
     |      #set an edge property: these are auto indexed:
     |  
     |      e.weight = 1 
     |      # or:
     |      e2.__setattr__('how_much','a lot!')
     |  
     |  Edge data (private): 
     |  ---------------------------
     |  
     |  As with nodes, certain members are callable. When called, 
     |  these will return Node()'s instead of just their ID's.
     |
     |      callable:
     |      _in, _on
     |
     |  type is redis_natives.datatypes.Set:
     |      e._p          # keys of a edge's properties
     |
     |  type is rgr.NodePrimitive:
     |      e._in         # incoming node ID
     |      e._in()       # incoming Node()
     |      e._on         # outgoing node ID
     |      e._on()       # outgoing Node()
     |
     |  regular python dict():
     |      e._properties # dict of edge's property data
     |  
     |      # don't edit this stuff directly.  
     |  
     |  TODO: make Edge._on(), etc, return a Node() rather than
     |      just a Node ID
     | ______________________________________________________________________
     |  
     |  Method resolution order:
     |      Edge
     |      GraphElement
     |      __builtin__.object
     | ______________________________________________________________________
     |  
     |  Methods defined here:
     |  
     |  __init__(self, graph, id)
     |      same as Node().
     |  
     | ______________________________________________________________________
     |  
     |  Methods inherited from GraphElement:
     |  
     |  ----------------------------------------------------------------------
     |  __delattr__(self, name)
     |  ----------------------------------------------------------------------
     |      delete an attribute from an element.
     |      i.e. `del node.foo` removes 'foo' from
     |      redis and the index.
     |  
     |  ----------------------------------------------------------------------
     |  __getattr__(self, name)
     |  ----------------------------------------------------------------------
     |      python ignores this if it finds something in
     |      __dict__, otherwise, search _properties and
     |      throw an error if you try to access a property that
     |      doesn't exist.
     |  
     |  ----------------------------------------------------------------------
     |  __setattr__(self, name, value)
     |  ----------------------------------------------------------------------
     |      (abstract?) Base class for Node's and Edges. 
     |      
     |      all properties get placed into _properties dict
     |      unless they are instantiated during __init__.
     |      I stole a couple of lines from bulbflow to 
     |      make that happen.
     |     




